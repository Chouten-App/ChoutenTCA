// swift-tools-version: 5.7
// This file is auto-generated. Do not edit this file directly. Instead, make changes in `Package/` directory and then run `package.sh` to generate a new `Package.swift` file.
//
// Array+Depedencies.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension Array: Dependencies where Element == Dependency {
  func appending(_ dependencies: any Dependencies) -> [Dependency] {
    self + dependencies
  }
}
//
// Array+SupportedPlatforms.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension Array: SupportedPlatforms where Element == SupportedPlatform {
  func appending(_ platforms: any SupportedPlatforms) -> Self {
    self + .init(platforms)
  }
}
//
// Array+TestTargets.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension Array: TestTargets where Element == TestTarget {
  func appending(_ testTargets: any TestTargets) -> [TestTarget] {
    self + testTargets
  }
}
//
//  CSettingsBuilder.swift
//  
//
//  Created by ErrorErrorError on 10/5/23.
//  
//

@resultBuilder
enum CSettingsBuilder {
  static func buildPartialBlock(first: CSetting) -> [CSetting] {
    [first]
  }

  static func buildPartialBlock(accumulated: [CSetting], next: CSetting) -> [CSetting] {
    accumulated + [next]
  }
}
//
// Dependencies.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol Dependencies: Sequence where Element == Dependency {
  // swiftlint:disable:next identifier_name
  init<S>(_ s: S) where S.Element == Dependency, S: Sequence
  func appending(_ dependencies: any Dependencies) -> Self
}
//
// Dependency.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol Dependency {
  var targetDepenency: _PackageDescription_TargetDependency { get }
}
//
// DependencyBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

@resultBuilder
enum DependencyBuilder {
  static func buildPartialBlock(first: Dependency) -> any Dependencies {
    [first]
  }

  static func buildPartialBlock(accumulated: any Dependencies, next: Dependency) -> any Dependencies {
    accumulated + [next]
  }
}
//
// LanguageTag.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension LanguageTag {
  static let english: LanguageTag = "en"
}
//
// Package+Extensions.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension Package {
  convenience init(
    name: String? = nil,
    @ProductsBuilder entries: @escaping () -> [Product],
    @TestTargetBuilder testTargets: @escaping () -> any TestTargets = { [TestTarget]() },
    @SwiftSettingsBuilder swiftSettings: @escaping () -> [SwiftSetting] = { [SwiftSetting]() }
  ) {
    let packageName: String
    if let name {
      packageName = name
    } else {
      var pathComponents = #filePath.split(separator: "/")
      pathComponents.removeLast()
      // swiftlint:disable:next force_unwrapping
      packageName = String(pathComponents.last!)
    }
    let allTestTargets = testTargets()
    let entries = entries()
    let products = entries.map(_PackageDescription_Product.entry)
    var targets = entries.flatMap(\.productTargets)
    let allTargetsDependencies = targets.flatMap { $0.allDependencies() }
    let allTestTargetsDependencies = allTestTargets.flatMap { $0.allDependencies() }
    let dependencies = allTargetsDependencies + allTestTargetsDependencies
    let targetDependencies = dependencies.compactMap { $0 as? Target }
    let packageDependencies = dependencies.compactMap { $0 as? PackageDependency }
    targets += targetDependencies
    targets += allTestTargets.map { $0 as Target }
    assert(targetDependencies.count + packageDependencies.count == dependencies.count)

    let packgeTargets = Dictionary(
      grouping: targets,
      by: { $0.name }
    )
    .values
    .compactMap(\.first)
    .map { _PackageDescription_Target.entry($0, swiftSettings: swiftSettings()) }

    let packageDeps = Dictionary(
      grouping: packageDependencies,
      by: { $0.productName }
    ).values.compactMap(\.first).map(\.dependency)

    self.init(name: packageName, products: products, dependencies: packageDeps, targets: packgeTargets)
  }
}

extension Package {
  func supportedPlatforms(
    @SupportedPlatformBuilder supportedPlatforms: @escaping () -> any SupportedPlatforms
  ) -> Package {
    self.platforms = .init(supportedPlatforms())
    return self
  }

  func defaultLocalization(_ defaultLocalization: LanguageTag) -> Package {
    self.defaultLocalization = defaultLocalization
    return self
  }
}
//
// PackageDependency.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

import PackageDescription

protocol PackageDependency: Dependency {
  var packageName: String { get }
  var dependency: _PackageDescription_PackageDependency { get }
}

extension PackageDependency {
  var productName: String {
    "\(Self.self)"
  }
  
  var packageName : String {
    switch self.dependency.kind {
    case let .sourceControl(name: name, location: location, requirement: _):
      return name ?? location.packageName ?? productName
    case let .fileSystem(name: name, path: path):
      return name ?? path.packageName ?? productName
    case let .registry(id: id, requirement: _):
      return id
    @unknown default:
      return productName
    }
  }

  var targetDepenency: _PackageDescription_TargetDependency {
    switch self.dependency.kind {
    case let .sourceControl(name: name, location: location, requirement: _):
      let packageName = name ?? location.packageName
      return .product(name: productName, package: packageName)

    default:
      return .byName(name: productName)
    }
  }
}
//
// PackageDescription.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

// swiftlint:disable type_name

import PackageDescription

typealias _PackageDescription_Product = PackageDescription.Product
typealias _PackageDescription_Target = PackageDescription.Target
typealias _PackageDescription_TargetDependency = PackageDescription.Target.Dependency
typealias _PackageDescription_PackageDependency = PackageDescription.Package.Dependency
//
// PlatformSet.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol PlatformSet {
  @SupportedPlatformBuilder
  var body: any SupportedPlatforms { get }
}
//
// Product+Target.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension Product where Self: Target {
  var productTargets: [Target] {
    [self]
  }

  var targetType: TargetType {
    switch self.productType {
    case .library:
      return .regular

    case .executable:
      return .executable
    }
  }
}
//
// Product.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol Product: _Named {
  var productTargets: [Target] { get }
  var productType: ProductType { get }
}

extension Product {
  var productType: ProductType {
    .library
  }
}
//
// ProductType.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

enum ProductType {
  case library
  case executable
}
//
// ProductsBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

@resultBuilder
enum ProductsBuilder {
  static func buildPartialBlock(first: Product) -> [Product] {
    [first]
  }

  static func buildPartialBlock(accumulated: [Product], next: Product) -> [Product] {
    accumulated + [next]
  }
}
//
// ResourcesBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

@resultBuilder
enum ResourcesBuilder {
  static func buildPartialBlock(first: Resource) -> [Resource] {
    [first]
  }

  static func buildPartialBlock(accumulated: [Resource], next: Resource) -> [Resource] {
    accumulated + [next]
  }
}
//
// String.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension String {
  var packageName: String? {
    self.split(separator: "/").last?.split(separator: ".").first.map(String.init)
  }
}
//
// SupportedPlatformBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

import PackageDescription

@resultBuilder
enum SupportedPlatformBuilder {
  static func buildPartialBlock(first: SupportedPlatform) -> any SupportedPlatforms {
    [first]
  }

  static func buildPartialBlock(first: PlatformSet) -> any SupportedPlatforms {
    first.body
  }

  static func buildPartialBlock(first: any SupportedPlatforms) -> any SupportedPlatforms {
    first
  }

  static func buildPartialBlock(
    accumulated: any SupportedPlatforms,
    next: any SupportedPlatforms
  ) -> any SupportedPlatforms {
    accumulated.appending(next)
  }

  static func buildPartialBlock(
    accumulated: any SupportedPlatforms,
    next: SupportedPlatform
  ) -> any SupportedPlatforms {
    accumulated.appending([next])
  }
}
//
// SupportedPlatforms.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol SupportedPlatforms: Sequence where Element == SupportedPlatform {
  // swiftlint:disable:next identifier_name
  init<S>(_ s: S) where S.Element == SupportedPlatform, S: Sequence
  func appending(_ platforms: any SupportedPlatforms) -> Self
}
//
// SwiftSettingsBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

@resultBuilder
enum SwiftSettingsBuilder {
  static func buildPartialBlock(first: SwiftSetting) -> [SwiftSetting] {
    [first]
  }

  static func buildPartialBlock(accumulated: [SwiftSetting], next: SwiftSetting) -> [SwiftSetting] {
    accumulated + [next]
  }
}
//
// Target.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol Target: _Depending, Dependency, _Named, _Path {
  var targetType: TargetType { get }

  @CSettingsBuilder
  var cSettings: [CSetting] { get }

  @SwiftSettingsBuilder
  var swiftSettings: [SwiftSetting] { get }

  @ResourcesBuilder
  var resources: [Resource] { get }
}

extension Target {
  var targetType: TargetType {
    .regular
  }

  var targetDepenency: _PackageDescription_TargetDependency {
    .target(name: self.name)
  }

  var cSettings: [CSetting] {
    []
  }

  var swiftSettings: [SwiftSetting] {
    []
  }

  var resources: [Resource] {
    []
  }
}
//
// TargetType.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

//typealias TargetType = Target.TargetType

enum TargetType {
  case regular
  case executable
  case test
  case binary(BinaryTarget)

  enum BinaryTarget {
    case path(String)
    case remote(url: String, checksum: String)
  }
}
//
// TestTarget.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol TestTarget: Target {}

extension TestTarget {
  var targetType: TargetType {
    .test
  }
}
//
// TestTargetBuilder.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

@resultBuilder
enum TestTargetBuilder {
  static func buildPartialBlock(first: TestTarget) -> any TestTargets {
    [first]
  }

  static func buildPartialBlock(accumulated: any TestTargets, next: TestTarget) -> any TestTargets {
    accumulated + [next]
  }
}
//
// TestTargets.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol TestTargets: Sequence where Element == TestTarget {
  // swiftlint:disable:next identifier_name
  init<S>(_ s: S) where S.Element == TestTarget, S: Sequence
  func appending(_ testTargets: any TestTargets) -> Self
}
//
// _Depending.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol _Depending {
  @DependencyBuilder
  var dependencies: any Dependencies { get }
}

extension _Depending {
  var dependencies: any Dependencies {
    [Dependency]()
  }
}

extension _Depending {
  func allDependencies() -> [Dependency] {
    self.dependencies.compactMap {
      $0 as? _Depending
    }
    .flatMap {
      $0.allDependencies()
    }
    .appending(self.dependencies)
  }
}
//
// _Named.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

protocol _Named {
  var name: String { get }
}

extension _Named {
  var name: String {
    "\(Self.self)"
  }
}
//
// _PackageDescription_Product.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension _PackageDescription_Product {
  static func entry(_ entry: Product) -> _PackageDescription_Product {
    let targets = entry.productTargets.map(\.name)

    switch entry.productType {
    case .executable:
      return Self.executable(name: entry.name, targets: targets)

    case .library:
      return Self.library(name: entry.name, targets: targets)
    }
  }
}
//
// _PackageDescription_Target.swift
// Copyright (c) 2023 BrightDigit.
// Licensed under MIT License
//

extension _PackageDescription_Target {
  static func entry(_ entry: Target, swiftSettings: [SwiftSetting] = []) -> _PackageDescription_Target {
    let dependencies = entry.dependencies.map(\.targetDepenency)
    switch entry.targetType {
    case .executable:
      return .executableTarget(
        name: entry.name,
        dependencies: dependencies,
        path: entry.path,
        resources: entry.resources,
        cSettings: entry.cSettings,
        swiftSettings: swiftSettings + entry.swiftSettings
      )

    case .regular:
      return .target(
        name: entry.name,
        dependencies: dependencies,
        path: entry.path,
        resources: entry.resources,
        cSettings: entry.cSettings,
        swiftSettings: swiftSettings + entry.swiftSettings
      )

    case .test:
      return .testTarget(
        name: entry.name,
        dependencies: dependencies,
        path: entry.path,
        resources: entry.resources,
        cSettings: entry.cSettings,
        swiftSettings: swiftSettings + entry.swiftSettings
      )

    case .binary(.path(let path)):
      return .binaryTarget(
        name: entry.name,
        path: path
      )

    case .binary(.remote(let url, let checksum)):
      return .binaryTarget(
        name: entry.name,
        url: url,
        checksum: checksum
      )
    }
  }
}
//
//  _Path.swift
//  
//
//  Created by ErrorErrorError on 10/5/23.
//  
//

import Foundation

protocol _Path {
  var path: String? { get }
}

extension _Path {
  var path: String? { nil }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 29.10.23.
//

struct DataClient: Client {
    var dependencies: any Dependencies {
        ComposableArchitecture()
        Architecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 17.10.23.
//

struct FileClient: Client {
    var dependencies: any Dependencies {
        ComposableArchitecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 17.10.23.
//

struct ModuleClient: Client {
    var dependencies: any Dependencies {
        ComposableArchitecture()
        ZIPFoundation()
        Architecture()
    }
}
//
//  _Client.swift
//  
//
//  Created by Inumaki on 17.10.23.
//

import Foundation

protocol Client: Target {}

extension Client {
    var path: String? {
        "Sources/Clients/\(self.name)"
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

struct ComposableArchitecture: PackageDependency {
    var dependency: Package.Dependency {
        .package(url: "https://github.com/pointfreeco/swift-composable-architecture", exact: "1.2.0")
    }
}
//
//  Kingfisher.swift
//  
//
//  Created by Inumaki on 12.10.23.
//

struct Kingfisher: PackageDependency {
    var dependency: Package.Dependency {
        .package(url: "https://github.com/onevcat/Kingfisher.git", from: "7.0.0")
    }
}
//
//  Shimmer.swift
//
//
//  Created by Inumaki on 12.10.23.
//

struct Shimmer: PackageDependency {
    var dependency: Package.Dependency {
        .package(url: "https://github.com/markiv/SwiftUI-Shimmer.git", exact: "1.4.0")
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 17.10.23.
//

struct ZIPFoundation: PackageDependency {
    var dependency: Package.Dependency {
        .package(url: "https://github.com/weichsel/ZIPFoundation.git", from: "0.9.0")
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

import Foundation

struct ChoutenApp: Product, Target {
    var name: String {
        "App"
    }

    var path: String? {
        "Sources/Features/\(self.name)"
    }

    var dependencies: any Dependencies {
        Architecture()
        More()
        Player()
        ModuleSheet()
        Discover()
        ViewComponents()
        ComposableArchitecture()
        Shimmer()
        Kingfisher()
        DataClient()
    }
}
//
//  Discover.swift
//  
//
//  Created by Inumaki on 12.10.23.
//

struct Discover: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ViewComponents()
        Shimmer()
        Search()
        Kingfisher()
        ComposableArchitecture()
        ModuleClient()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 16.10.23.
//

struct Info: Feature {
    var dependencies: any Dependencies {
        Architecture()
        Kingfisher()
        ComposableArchitecture()
        ViewComponents()
        Webview()
        DataClient()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 19.10.23.
//

struct ModuleSheet: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ModuleClient()
        ComposableArchitecture()
        Kingfisher()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

struct More: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ComposableArchitecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 16.10.23.
//

struct Player: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ComposableArchitecture()
        ViewComponents()
        Kingfisher()
        Webview()
        SharedModels()
        ModuleClient()
        DataClient()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 14.10.23.
//

struct Search: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ViewComponents()
        Shimmer()
        Info()
        Kingfisher()
        ComposableArchitecture()
        SharedModels()
        ModuleClient()
        Webview()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 21.10.23.
//

struct Webview: Feature {
    var dependencies: any Dependencies {
        Architecture()
        ComposableArchitecture()
        ModuleClient()
    }
}
//
//  _Feature.swift
//
//
//  Created by Inumaki on 10.10.23.
//

import Foundation

protocol Feature: Product, Target {}

extension Feature {
    var path: String? {
        "Sources/Features/\(self.name)"
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

import PackageDescription

struct ChoutenPlatforms: PlatformSet {
    var body: any SupportedPlatforms {
        SupportedPlatform.iOS(.v15)
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

struct Architecture: Shared {
    var dependencies: any Dependencies {
        FoundationHelpers()
        ComposableArchitecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

struct FoundationHelpers: Shared {}
//
//  File.swift
//  
//
//  Created by Inumaki on 17.10.23.
//

struct SharedModels: Shared {
    var dependencies: any Dependencies {
        ComposableArchitecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 12.10.23.
//

import Foundation

struct ViewComponents: Shared {
    var dependencies: any Dependencies {
        Kingfisher()
        SharedModels()
        ComposableArchitecture()
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

import Foundation

protocol Shared: Product, Target {}

extension Shared {
    var path: String? {
        "Sources/Shared/\(self.name)"
    }
}
//
//  File.swift
//  
//
//  Created by Inumaki on 10.10.23.
//

import Foundation

let package = Package {
    More()
    Discover()
    Search()
    Info()
    Player()
    ModuleSheet()
    Webview()
    
    ChoutenApp()
}
.supportedPlatforms {
    ChoutenPlatforms()
}
